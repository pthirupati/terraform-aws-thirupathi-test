pipeline {
    agent any

    environment {
        AWS_CREDENTIALS = credentials('aws_secret_and_access') // Jenkins credentials ID for AWS
        SLACK_CREDENTIALS = credentials('slack-token') // Jenkins credentials ID for Slack token
        TF_IN_AUTOMATION = 'true' // Specifies that Terraform runs in automation mode
    }

    parameters {
        string(name: 'TERRAFORM_DIR', description: 'Specify the Terraform directory to run operations in (e.g., ec2, iam, vpc, eip)')
    }

    stages {
        stage('Notify Start') {
            steps {
                script {
                    slackSend(channel: '#terraform', message: "Jenkins job `${env.JOB_NAME}` started. Build #${env.BUILD_NUMBER}", tokenCredentialId: 'SLACK_CREDENTIALS')
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    def terraformDir = params.TERRAFORM_DIR
                    if (!terraformDir) {
                        error "TERRAFORM_DIR parameter is required."
                    }
                }
                git branch: 'main', url: 'https://github.com/pthirupati/terraform-aws-thirupathi-test.git'
            }
        }

        stage('Setup Terraform Backend') {
            steps {
                script {
                    def terraformDir = params.TERRAFORM_DIR
                    if (!terraformDir) {
                        error "TERRAFORM_DIR parameter is required."
                    }

                    // Generate backend.tf with dynamic state path based on TERRAFORM_DIR parameter
                    writeFile file: "${terraformDir}/backend.tf", text: """
terraform {
  backend "s3" {
    bucket         = "terraform-aws-thirupathi-test"
    key            = "${terraformDir}/state/terraform.tfstate"
    region         = "ap-south-1"
    encrypt        = true
  }
}
"""
                }
            }
        }

        stage('Setup Terraform') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        sh '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform init
                        '''
                    }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        sh '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform plan -out=tfplan
                        '''
                    }
                }
            }
        }

        stage('Approval') {
            steps {
                script {
                    slackSend(channel: '#terraform', message: "Approval required for Terraform Apply in job `${env.JOB_NAME}`. Build #${env.BUILD_NUMBER}", tokenCredentialId: 'SLACK_CREDENTIALS')
                }
                input message: 'Do you want to proceed with Terraform Apply?', ok: 'Proceed'
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        sh '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform apply -auto-approve tfplan
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                def terraformDir = params.TERRAFORM_DIR
                slackSend(channel: '#terraform', message: "Jenkins job `${env.JOB_NAME}` succeeded. Build #${env.BUILD_NUMBER}. State file located at: s3://terraform-aws-thirupathi-test/${terraformDir}/state/terraform.tfstate", tokenCredentialId: 'SLACK_CREDENTIALS')
            }
            echo 'Pipeline succeeded!'
        }
        failure {
            script {
                def logs = currentBuild.rawBuild.getLog(100) // Get last 100 lines of logs
                slackSend(channel: '#terraform', message: "Jenkins job `${env.JOB_NAME}` failed. Build #${env.BUILD_NUMBER}.\nLogs:\n${logs}", tokenCredentialId: 'SLACK_CREDENTIALS')
            }
            echo 'Pipeline failed.'
        }
        aborted {
            script {
                slackSend(channel: '#terraform', message: "Jenkins job `${env.JOB_NAME}` was aborted. Build #${env.BUILD_NUMBER}", tokenCredentialId: 'SLACK_CREDENTIALS')
            }
            echo 'Pipeline aborted.'
        }
        always {
            cleanWs()
        }
    }
}
