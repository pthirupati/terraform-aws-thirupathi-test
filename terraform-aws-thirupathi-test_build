pipeline {
    agent any

    environment {
        AWS_CREDENTIALS = credentials('aws_secret_and_access')
        TF_IN_AUTOMATION = 'true'
        SLACK_CREDENTIALS = credentials('slack-token')
    }

    parameters {
        string(name: 'TERRAFORM_DIR', description: 'Specify the Terraform directory to run operations in (e.g., ec2, iam, vpc, eip)')
    }

    stages {
        stage('Notify Start') {
            steps {
                script {
                    slackSend(channel: '#terraform',
                              message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Pipeline started.",
                              tokenCredentialId: 'SLACK_CREDENTIALS')
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    def terraformDir = params.TERRAFORM_DIR
                    if (!terraformDir) {
                        error "TERRAFORM_DIR parameter is required."
                    }
                }
                git branch: 'main', url: 'https://github.com/pthirupati/terraform-aws-thirupathi-test.git'
            }
        }

        stage('Setup Terraform Backend') {
            steps {
                script {
                    def terraformDir = params.TERRAFORM_DIR
                    writeFile file: "${terraformDir}/backend.tf", text: """
                    terraform {
                      backend "s3" {
                        bucket         = "terraform-aws-thirupathi-test"
                        key            = "${terraformDir}/state/terraform.tfstate"
                        region         = "ap-south-1"
                        encrypt        = true
                      }
                    }
                    """
                }
            }
        }

        stage('Setup Terraform') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        sh '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform init
                        '''
                    }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        def planOutput = sh(script: '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform plan -out=tfplan
                        ''', returnStdout: true).trim()

                        // Save the plan output to a file
                        writeFile file: 'plan_output.txt', text: planOutput

                        // Upload the plan output to Slack as an attachment
                        slackSend(channel: '#terraform',
                                  message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Terraform Plan is attached.",
                                  tokenCredentialId: 'SLACK_CREDENTIALS',
                                  attachments: '[{"text": "Terraform Plan Output", "fallback": "Plan output attached.", "attachment_type": "default"}]',
                                  filePath: 'plan_output.txt')
                    }
                }
            }
        }

        stage('Slack Approval') {
            steps {
                script {
                    // Send Slack notification asking for approval
                    def slackApprovalMessage = """
                    Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Terraform Plan is complete. 
                    Please approve or reject the Terraform Apply.
                    """

                    slackSend(channel: '#terraform',
                              message: slackApprovalMessage,
                              attachments: '[{"text": "Approve Terraform Apply?", "fallback": "You are unable to choose", "callback_id": "apply_approval", "actions": [{"name": "approval", "text": "Approve", "type": "button", "value": "approve"}, {"name": "rejection", "text": "Reject", "type": "button", "value": "reject"}]}]',
                              tokenCredentialId: 'SLACK_CREDENTIALS')
                    
                    // Capture input in Jenkins based on manual action
                    def approvalResponse = input message: 'Waiting for Slack Approval...',
                                               ok: 'Proceed with Apply',
                                               submitter: 'approver', parameters: [
                        choice(choices: ['approve', 'reject'], description: 'Select action', name: 'approval')
                    ]
                    
                    if (approvalResponse == 'approve') {
                        slackSend(channel: '#terraform',
                                  message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Approval received. Proceeding with Terraform Apply.",
                                  tokenCredentialId: 'SLACK_CREDENTIALS')
                    } else {
                        slackSend(channel: '#terraform',
                                  message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Approval rejected. Aborting the pipeline.",
                                  tokenCredentialId: 'SLACK_CREDENTIALS')
                        error("Pipeline aborted due to rejection.")
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        def applyOutput = sh(script: '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform apply -auto-approve tfplan
                        ''', returnStdout: true).trim()

                        slackSend(channel: '#terraform',
                                  message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Terraform Apply Output attached. State file: s3://terraform-aws-thirupathi-test/${params.TERRAFORM_DIR}/state/terraform.tfstate",
                                  tokenCredentialId: 'SLACK_CREDENTIALS',
                                  filePath: 'apply_output.txt')
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                slackSend(channel: '#terraform',
                          message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Pipeline succeeded! State file: s3://terraform-aws-thirupathi-test/${params.TERRAFORM_DIR}/state/terraform.tfstate",
                          tokenCredentialId: 'SLACK_CREDENTIALS')
            }
            echo 'Pipeline succeeded!'
        }
        failure {
            script {
                slackSend(channel: '#terraform',
                          message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Pipeline failed. Check the logs for details.",
                          tokenCredentialId: 'SLACK_CREDENTIALS')
            }
            echo 'Pipeline failed.'
        }
        always {
            script {
                cleanWs()
                slackSend(channel: '#terraform',
                          message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Pipeline completed.",
                          tokenCredentialId: 'SLACK_CREDENTIALS')
            }
        }
    }
}
