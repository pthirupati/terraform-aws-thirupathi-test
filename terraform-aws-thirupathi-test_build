pipeline {
    agent any

    environment {
        AWS_CREDENTIALS = credentials('aws_secret_and_access') // Jenkins credentials ID for AWS
        TF_IN_AUTOMATION = 'true' // Specifies that Terraform runs in automation mode
        EMAIL_RECIPIENT = 'thirupathi.samu2018@gmail.com'
    }

    parameters {
        string(name: 'TERRAFORM_DIR', description: 'Specify the Terraform directory to run operations in (e.g., ec2, iam, vpc, eip)')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    def terraformDir = params.TERRAFORM_DIR
                    if (!terraformDir) {
                        error "TERRAFORM_DIR parameter is required."
                    }
                }
                git branch: 'main', url: 'https://github.com/pthirupati/terraform-aws-thirupathi-test.git'
            }
        }

        stage('Setup Terraform Backend') {
            steps {
                script {
                    def terraformDir = params.TERRAFORM_DIR
                    if (!terraformDir) {
                        error "TERRAFORM_DIR parameter is required."
                    }

                    // Generate backend.tf with dynamic state path based on TERRAFORM_DIR parameter
                    writeFile file: "${terraformDir}/backend.tf", text: """
terraform {
  backend "s3" {
    bucket         = "terraform-aws-thirupathi-test"
    key            = "${terraformDir}/state/terraform.tfstate"
    region         = "ap-south-1"
    encrypt        = true
  }
}
"""
                }
            }
        }

        stage('Setup Terraform') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        sh '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform init
                        '''
                    }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        sh '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform plan -out=tfplan
                        '''
                    }
                }
            }
        }

        stage('Start Job Notification') {
            steps {
                script {
                    // Send email notification when the job starts
                    emailext(
                        subject: "Job Started: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                        body: """<p>Job: ${env.JOB_NAME}</p>
                                  <p>Build Number: ${env.BUILD_NUMBER}</p>""",
                        to: "${EMAIL_RECIPIENT}"
                    )
                }
            }
        }

        stage('Approval') {
            steps {
                input message: 'Do you want to proceed with Terraform Apply?', ok: 'Proceed'
                script {
                    // Send email notification before the approval stage
                    emailext(
                        subject: "Approval Stage: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                        body: """<p>Job: ${env.JOB_NAME}</p>
                                  <p>Build Number: ${env.BUILD_NUMBER}</p>
                                  <p>Job is about to proceed with Terraform Apply.</p>""",
                        to: "${EMAIL_RECIPIENT}"
                    )
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        sh '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform apply -auto-approve tfplan
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                // Send success email
                emailext(
                    subject: "Job Completed Successfully: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: """<p>The job has completed successfully!</p>
                              <p>Job: ${env.JOB_NAME}</p>
                              <p>Build Number: ${env.BUILD_NUMBER}</p>
                              <p>State File Path: ${params.TERRAFORM_DIR}/state/terraform.tfstate</p>""",
                    to: "${EMAIL_RECIPIENT}"
                )
            }
            echo 'Pipeline succeeded!'
        }
        failure {
            script {
                // Send failure email with logs
                def logFile = currentBuild.rawBuild.getLog(100).join("\n")
                emailext(
                    subject: "Job Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: """<p>The job has failed.</p>
                              <p>Job: ${env.JOB_NAME}</p>
                              <p>Build Number: ${env.BUILD_NUMBER}</p>
                              <p>Logs:</p>
                              <pre>${logFile}</pre>""",
                    to: "${EMAIL_RECIPIENT}"
                )
            }
            echo 'Pipeline failed.'
        }
        always {
            cleanWs()
        }
    }
}
