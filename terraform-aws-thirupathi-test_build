pipeline {
    agent any

    environment {
        AWS_CREDENTIALS = credentials('aws_secret_and_access') // Jenkins credentials ID for AWS
        TF_IN_AUTOMATION = 'true' // Specifies that Terraform runs in automation mode
        SLACK_CREDENTIALS = credentials('slack-token') // Jenkins credentials ID for Slack token
    }

    parameters {
        string(name: 'TERRAFORM_DIR', description: 'Specify the Terraform directory to run operations in (e.g., ec2, iam, vpc, eip)')
    }

    stages {
        stage('Notify Start') {
            steps {
                script {
                    slackSend(channel: '#terraform',
                              message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Pipeline started.",
                              token: SLACK_CREDENTIALS)
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    def terraformDir = params.TERRAFORM_DIR
                    if (!terraformDir) {
                        error "TERRAFORM_DIR parameter is required."
                    }
                }
                git branch: 'main', url: 'https://github.com/pthirupati/terraform-aws-thirupathi-test.git'
            }
        }

        stage('Setup Terraform Backend') {
            steps {
                script {
                    def terraformDir = params.TERRAFORM_DIR
                    if (!terraformDir) {
                        error "TERRAFORM_DIR parameter is required."
                    }

                    // Generate backend.tf with dynamic state path based on TERRAFORM_DIR parameter
                    writeFile file: "${terraformDir}/backend.tf", text: """
terraform {
  backend "s3" {
    bucket         = "terraform-aws-thirupathi-test"
    key            = "${terraformDir}/state/terraform.tfstate"
    region         = "ap-south-1"
    encrypt        = true
  }
}
"""
                }
            }
        }

        stage('Setup Terraform') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        sh '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform init
                        '''
                    }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        // Run terraform plan and capture output
                        def planOutput = sh(script: '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform plan -out=tfplan
                        ''', returnStdout: true).trim()

                        // Write output to a file for reference
                        writeFile file: 'plan_output.txt', text: planOutput

                        // Print the entire plan output to Jenkins console
                        echo "Terraform Plan Output:\n${planOutput}"

                        // Send Slack notification with plan output after the entire plan is completed
                        slackSend(channel: '#terraform',
                                  message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Terraform Plan Output:\n${planOutput}",
                                  token: SLACK_CREDENTIALS)
                    }
                }
            }
        }

        stage('Slack Approval') {
            steps {
                script {
                    // Send Slack notification asking for approval
                    def slackApprovalMessage = """
                    Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Terraform Plan is complete. 
                    Please approve or reject the Terraform Apply in Slack.
                    """
                    
                    def response = slackSend(channel: '#terraform',
                                             message: slackApprovalMessage,
                                             attachments: '[{"text": "Approve Terraform Apply?", "fallback": "You are unable to choose", "callback_id": "apply_approval", "actions": [{"name": "approval", "text": "Approve", "type": "button", "value": "approve"}, {"name": "rejection", "text": "Reject", "type": "button", "value": "reject"}]}]',
                                             token: SLACK_CREDENTIALS)
                    
                    // Capture response from Slack
                    def approvalResponse = input(id: 'Approval', message: 'Waiting for Slack Approval...', parameters: [string(defaultValue: 'Pending', description: 'Slack Approval Response', name: 'slack_approval')])
                    
                    if (approvalResponse == 'approve') {
                        slackSend(channel: '#terraform',
                                  message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Approval received. Proceeding with Terraform Apply.",
                                  token: SLACK_CREDENTIALS)
                    } else {
                        slackSend(channel: '#terraform',
                                  message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Approval rejected. Aborting the pipeline.",
                                  token: SLACK_CREDENTIALS)
                        error("Pipeline aborted due to rejection.")
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        def applyOutput = sh(script: '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform apply -auto-approve tfplan
                        ''', returnStdout: true).trim()

                        // Send Slack notification with apply output and state file
                        slackSend(channel: '#terraform',
                                  message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Terraform Apply Output:\n${applyOutput}\nState file: s3://terraform-aws-thirupathi-test/${params.TERRAFORM_DIR}/state/terraform.tfstate",
                                  token: SLACK_CREDENTIALS)
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                slackSend(channel: '#terraform',
                          message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Pipeline succeeded! State file: s3://terraform-aws-thirupathi-test/${params.TERRAFORM_DIR}/state/terraform.tfstate",
                          token: SLACK_CREDENTIALS)
            }
            echo 'Pipeline succeeded!'
        }
        failure {
            script {
                slackSend(channel: '#terraform',
                          message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Pipeline failed. Check the logs for details.",
                          token: SLACK_CREDENTIALS)
            }
            echo 'Pipeline failed.'
        }
        always {
            script {
                // Clean workspace
                cleanWs()
                // Notify completion
                slackSend(channel: '#terraform',
                          message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Pipeline has completed execution.",
                          token: SLACK_CREDENTIALS)
                // Check for aborted builds
                if (currentBuild.result == 'ABORTED') {
                    slackSend(channel: '#terraform',
                              message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Pipeline aborted. Check the logs for details.",
                              token: SLACK_CREDENTIALS)
                }
            }
        }
    }
}
