pipeline {
    agent any

    environment {
        AWS_CREDENTIALS = credentials('aws_secret_and_access') // Jenkins credentials ID for AWS
        TF_IN_AUTOMATION = 'true' // Specifies that Terraform runs in automation mode
        SLACK_WEBHOOK_URL = credentials('slack-webhook') // Retrieve Slack Webhook URL from Jenkins credentials
    }

    parameters {
        string(name: 'TERRAFORM_DIR', description: 'Specify the Terraform directory to run operations in (e.g., ec2, iam, vpc, eip)')
    }

    stages {
        stage('Start Notification') {
            steps {
                script {
                    def message = """
                    {
                        "text": "Pipeline Notification: *${env.JOB_NAME} #${env.BUILD_NUMBER}* has started for Terraform Directory: *${params.TERRAFORM_DIR}*",
                        "attachments": [
                            {
                                "color": "#36a64f", // Green color for "Started"
                                "text": "The Terraform pipeline is starting."
                            }
                        ]
                    }
                    """
                    sh "curl -X POST -H 'Content-type: application/json' --data '${message}' ${SLACK_WEBHOOK_URL}"
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    def terraformDir = params.TERRAFORM_DIR
                    if (!terraformDir) {
                        error "TERRAFORM_DIR parameter is required."
                    }
                }
                git branch: 'main', url: 'https://github.com/pthirupati/terraform-aws-thirupathi-test.git'
            }
        }

        stage('Setup Terraform Backend') {
            steps {
                script {
                    def terraformDir = params.TERRAFORM_DIR
                    if (!terraformDir) {
                        error "TERRAFORM_DIR parameter is required."
                    }

                    // Generate backend.tf with dynamic state path based on TERRAFORM_DIR parameter
                    writeFile file: "${terraformDir}/backend.tf", text: """
terraform {
  backend "s3" {
    bucket         = "terraform-aws-thirupathi-test"
    key            = "${terraformDir}/state/terraform.tfstate"
    region         = "ap-south-1"
    encrypt        = true
  }
}
"""
                }
            }
        }

        stage('Setup Terraform') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        sh '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform init
                        '''
                    }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        sh '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform plan -out=tfplan
                        '''
                    }
                }
            }
        }

        stage('Approval') {
            steps {
                script {
                    def approvalMessage = """
                    {
                        "text": "Approval Required: The Terraform pipeline is waiting for approval.",
                        "attachments": [
                            {
                                "color": "#ffcc00", // Yellow color for "Approval Required"
                                "text": "Terraform Directory: *${params.TERRAFORM_DIR}*",
                                "fields": [
                                    {
                                        "title": "State File",
                                        "value": "<https://s3.amazonaws.com/terraform-aws-thirupathi-test/${params.TERRAFORM_DIR}/state/terraform.tfstate|Click Here>",
                                        "short": false
                                    }
                                ]
                            }
                        ]
                    }
                    """
                    sh "curl -X POST -H 'Content-type: application/json' --data '${approvalMessage}' ${SLACK_WEBHOOK_URL}"
                    input message: 'Do you want to proceed with Terraform Apply?', ok: 'Proceed'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        sh '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform apply -auto-approve tfplan
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                def outputs = sh(script: "cd ${params.TERRAFORM_DIR} && terraform output -json", returnStdout: true).trim()
                def successMessage = """
                {
                    "text": "Pipeline Succeeded: *${env.JOB_NAME} #${env.BUILD_NUMBER}* has successfully completed.",
                    "attachments": [
                        {
                            "color": "#36a64f", // Green color for "Success"
                            "text": "Terraform Directory: *${params.TERRAFORM_DIR}*",
                            "fields": [
                                {
                                    "title": "State File",
                                    "value": "<https://s3.amazonaws.com/terraform-aws-thirupathi-test/${params.TERRAFORM_DIR}/state/terraform.tfstate|Click Here>",
                                    "short": false
                                },
                                {
                                    "title": "Resources Created:",
                                    "value": "```${outputs}```",
                                    "short": false
                                }
                            ]
                        }
                    ]
                }
                """
                sh "curl -X POST -H 'Content-type: application/json' --data '${successMessage}' ${SLACK_WEBHOOK_URL}"
                echo 'Pipeline succeeded!'
            }
        }

        failure {
            script {
                def failureMessage = """
                {
                    "text": "Pipeline Failed: *${env.JOB_NAME} #${env.BUILD_NUMBER}* has failed.",
                    "attachments": [
                        {
                            "color": "#ff0000", // Red color for "Failure"
                            "text": "Terraform Directory: *${params.TERRAFORM_DIR}*",
                            "fields": [
                                {
                                    "title": "Error",
                                    "value": "```${currentBuild.rawBuild.log(50).join('\\n')}```",
                                    "short": false
                                },
                                {
                                    "title": "State File",
                                    "value": "<https://s3.amazonaws.com/terraform-aws-thirupathi-test/${params.TERRAFORM_DIR}/state/terraform.tfstate|Click Here>",
                                    "short": false
                                }
                            ]
                        }
                    ]
                }
                """
                sh "curl -X POST -H 'Content-type: application/json' --data '${failureMessage}' ${SLACK_WEBHOOK_URL}"
                echo 'Pipeline failed.'
            }
        }

        aborted {
            script {
                def abortedMessage = """
                {
                    "text": "Pipeline Aborted: *${env.JOB_NAME} #${env.BUILD_NUMBER}* has been aborted.",
                    "attachments": [
                        {
                            "color": "#ffcc00", // Yellow color for "Aborted"
                            "text": "Terraform Directory: *${params.TERRAFORM_DIR}*"
                        }
                    ]
                }
                """
                sh "curl -X POST -H 'Content-type: application/json' --data '${abortedMessage}' ${SLACK_WEBHOOK_URL}"
            }
        }

        always {
            cleanWs()
        }
    }
}
