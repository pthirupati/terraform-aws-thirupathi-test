pipeline {
    agent any

    environment {
        AWS_CREDENTIALS = credentials('aws_secret_and_access') // Jenkins credentials ID for AWS
        TF_IN_AUTOMATION = 'true' // Specifies that Terraform runs in automation mode
        SLACK_WEBHOOK_URL = 'https://hooks.slack.com/services/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' // Slack webhook URL
    }

    parameters {
        string(name: 'TERRAFORM_DIR', description: 'Specify the Terraform directory to run operations in (e.g., ec2, iam, vpc, eip)')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    def terraformDir = params.TERRAFORM_DIR
                    if (!terraformDir) {
                        error "TERRAFORM_DIR parameter is required."
                    }
                }
                git branch: 'main', url: 'https://github.com/pthirupati/terraform-aws-thirupathi-test.git'
                slackSend(channel: '#terraform', message: "Checkout complete for ${params.TERRAFORM_DIR}.")
            }
        }

        stage('Setup Terraform Backend') {
            steps {
                script {
                    def terraformDir = params.TERRAFORM_DIR
                    if (!terraformDir) {
                        error "TERRAFORM_DIR parameter is required."
                    }

                    // Generate backend.tf with dynamic state path based on TERRAFORM_DIR parameter
                    writeFile file: "${terraformDir}/backend.tf", text: """
terraform {
  backend "s3" {
    bucket         = "terraform-aws-thirupathi-test"
    key            = "${terraformDir}/state/terraform.tfstate"
    region         = "ap-south-1"
    encrypt        = true
  }
}
"""
                    slackSend(channel: '#terraform', message: "Terraform backend setup completed for ${params.TERRAFORM_DIR}.")
                }
            }
        }

        stage('Setup Terraform') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        sh '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform init
                        '''
                        slackSend(channel: '#terraform', message: "Terraform initialized for ${params.TERRAFORM_DIR}.")
                    }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        sh '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform plan -out=tfplan
                        '''
                        slackSend(channel: '#terraform', message: "Terraform plan completed for ${params.TERRAFORM_DIR}.")
                    }
                }
            }
        }

        stage('Approval') {
            steps {
                input message: 'Do you want to proceed with Terraform Apply?', ok: 'Proceed'
                slackSend(channel: '#terraform', message: "Approval received to proceed with Terraform Apply for ${params.TERRAFORM_DIR}.")
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        sh '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform apply -auto-approve tfplan
                        '''
                        slackSend(channel: '#terraform', message: "Terraform apply completed for ${params.TERRAFORM_DIR}.")
                    }
                }
            }
        }
    }

    post {
        success {
            slackSend(channel: '#terraform', message: "Pipeline succeeded for ${params.TERRAFORM_DIR}!")
            echo 'Pipeline succeeded!'
        }
        failure {
            slackSend(channel: '#terraform', message: "Pipeline failed for ${params.TERRAFORM_DIR}.")
            echo 'Pipeline failed.'
        }
        always {
            cleanWs()
        }
    }
}
