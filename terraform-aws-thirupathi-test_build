pipeline {
    agent any

    environment {
        AWS_CREDENTIALS = credentials('aws_secret_and_access') // Jenkins credentials ID for AWS
        TF_IN_AUTOMATION = 'true' // Specifies that Terraform runs in automation mode
        SLACK_CREDENTIALS = credentials('slack-token') // Jenkins credentials ID for Slack token
    }

    parameters {
        string(name: 'TERRAFORM_DIR', description: 'Specify the Terraform directory to run operations in (e.g., ec2, iam, vpc, eip)')
    }

    stages {
        stage('Pipeline Start Notification') {
            steps {
                script {
                    // Send Slack notification for pipeline start
                    slackSend(channel: '#terraform',
                              message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Pipeline has started.",
                              token: SLACK_CREDENTIALS)
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    def terraformDir = params.TERRAFORM_DIR
                    if (!terraformDir) {
                        error "TERRAFORM_DIR parameter is required."
                    }
                }
                git branch: 'main', url: 'https://github.com/pthirupati/terraformaws-thirupathi-test.git'
            }
        }

        stage('Setup Terraform Backend') {
            steps {
                script {
                    def terraformDir = params.TERRAFORM_DIR
                    if (!terraformDir) {
                        error "TERRAFORM_DIR parameter is required."
                    }

                    // Generate backend.tf with dynamic state path based on TERRAFORM_DIR parameter
                    writeFile file: "${terraformDir}/backend.tf", text: """
terraform {
  backend "s3" {
    bucket         = "terraformaws-thirupathi-test"
    key            = "${terraformDir}/state/terraform.tfstate"
    region         = "ap-south-1"
    encrypt        = true
  }
}
"""
                }
            }
        }

        stage('Setup Terraform') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        sh '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform init
                        '''
                    }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        // Capture the Terraform plan output in a file and print it to console
                        def planOutput = sh(script: '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform plan -out=tfplan | tee plan_output.txt
                        ''', returnStdout: true).trim()
                        
                        // Print plan output to the console
                        echo "Terraform Plan Output:\n${planOutput}"

                        // Archive the plan output file to be available in Jenkins
                        archiveArtifacts artifacts: "${params.TERRAFORM_DIR}/plan_output.txt", allowEmptyArchive: true

                        // Send the plan output file to Slack as a file upload
                        slackUploadFile(channel: '#terraform', 
                                        filePath: "${params.TERRAFORM_DIR}/plan_output.txt",
                                        initialComment: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Terraform Plan Output",
                                        token: SLACK_CREDENTIALS)
                    }
                }
            }
        }

        stage('Approval') {
            steps {
                script {
                    def inputMessage = "Do you want to proceed with Terraform Apply?"
                    def approval = input message: inputMessage, ok: 'Proceed'

                    // Send Slack notification for approval
                    slackSend(channel: '#terraform', 
                              message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Approval received: ${approval}",
                              token: SLACK_CREDENTIALS)
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        def applyOutput = sh(script: '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform apply -auto-approve tfplan
                        ''', returnStdout: true).trim()

                        // Print apply output to the console
                        echo "Terraform Apply Output:\n${applyOutput}"
                        
                        // Send Slack notification with apply output and state file
                        slackSend(channel: '#terraform', 
                                  message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Terraform Apply Output:\n${applyOutput}\nState file: s3://terraformaws-thirupathi-test/${params.TERRAFORM_DIR}/state/terraform.tfstate",
                                  token: SLACK_CREDENTIALS)
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                slackSend(channel: '#terraform', 
                          message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Pipeline succeeded! State file: s3://terraformaws-thirupathi-test/${params.TERRAFORM_DIR}/state/terraform.tfstate",
                          token: SLACK_CREDENTIALS)
            }
            echo 'Pipeline succeeded!'
        }
        failure {
            script {
                slackSend(channel: '#terraform', 
                          message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Pipeline failed. Check the logs for details.",
                          token: SLACK_CREDENTIALS)
            }
            echo 'Pipeline failed.'
        }
        always {
            script {
                // Clean workspace
                cleanWs()
                // Notify completion
                slackSend(channel: '#terraform', 
                          message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Pipeline has completed execution.",
                          token: SLACK_CREDENTIALS)
                // Check for aborted builds
                if (currentBuild.result == 'ABORTED') {
                    slackSend(channel: '#terraform', 
                              message: "Job: ${env.JOB_NAME} | Build ID: ${env.BUILD_ID} | Pipeline aborted. Check the logs for details.",
                              token: SLACK_CREDENTIALS)
                }
            }
        }
    }
}
