pipeline {
    agent any

    environment {
        AWS_CREDENTIALS = credentials('aws_secret_and_access') // Jenkins credentials ID for AWS
        TF_IN_AUTOMATION = 'true' // Specifies that Terraform runs in automation mode
        SLACK_CREDENTIALS = credentials('slack-webhook') // Jenkins credentials ID for Slack token
    }

    parameters {
        string(name: 'TERRAFORM_DIR', description: 'Specify the Terraform directory to run operations in (e.g., ec2, iam, vpc, eip)')
    }

    stages {
        stage('Notify Start') {
            steps {
                script {
                    slackSend(channel: '#terraform',
                              message: ":white_small_square: *Job:* ${env.JOB_NAME} \n*Build ID:* ${env.BUILD_ID} \n*Pipeline started.*",
                              token: SLACK_CREDENTIALS)
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    def terraformDir = params.TERRAFORM_DIR
                    if (!terraformDir) {
                        error "TERRAFORM_DIR parameter is required."
                    }
                }
                git branch: 'main', url: 'https://github.com/pthirupati/terraform-aws-thirupathi-test.git'
            }
        }

        stage('Setup Terraform Backend') {
            steps {
                script {
                    def terraformDir = params.TERRAFORM_DIR
                    if (!terraformDir) {
                        error "TERRAFORM_DIR parameter is required."
                    }

                    // Generate backend.tf with dynamic state path based on TERRAFORM_DIR parameter
                    writeFile file: "${terraformDir}/backend.tf", text: """
terraform {
  backend "s3" {
    bucket         = "terraform-aws-thirupathi-test"
    key            = "${terraformDir}/state/terraform.tfstate"
    region         = "ap-south-1"
    encrypt        = true
  }
}
"""
                }
            }
        }

        stage('Setup Terraform') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        sh '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform init
                        '''
                    }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        // Run terraform plan and capture output
                        sh '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform plan -out=tfplan
                        '''

                        // Show the plan in human-readable format and save it to tfplan.txt
                        sh '''
                        terraform show -no-color tfplan > /tf-plan/tfplan.txt
                        '''

                        // Send Slack notification with the plan initiation message
                        slackSend(channel: '#terraform',
                                  message: ":white_small_square: *Job:* ${env.JOB_NAME} \n*Build ID:* ${env.BUILD_ID} \n*Terraform Plan has been generated.*",
                                  token: SLACK_CREDENTIALS)
                    }
                }
            }
        }

        stage('Send tfplan.txt to Slack') {
            steps {
                script {
                    dir('/tf-plan') {  // Set the working directory to /tf-plan
                        // Upload only the tfplan.txt from the tf-plan directory
                        slackUploadFile(channel: '#terraform',
                                        file: "tfplan.txt",  // Adjusted file path to match the new directory
                                        initialComment: ":white_small_square: *Terraform Plan (tfplan.txt) for Job:* ${env.JOB_NAME} \n*Build ID:* ${env.BUILD_ID}",
                                        token: SLACK_CREDENTIALS)
                    }
                }
            }
        }

        stage('Approval') {
            steps {
                script {
                    def inputMessage = "Do you want to proceed with Terraform Apply? Please check the tfplan file above."
                    // Notify Slack about the approval request
                    slackSend(channel: '#terraform',
                              message: ":warning: *Job:* ${env.JOB_NAME} \n*Build ID:* ${env.BUILD_ID} \n*Approval needed for Terraform Apply.*",
                              token: SLACK_CREDENTIALS)

                    // Wait for user input
                    def approval = input message: inputMessage, ok: 'Proceed'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    dir("${params.TERRAFORM_DIR}") {
                        def applyOutput = sh(script: '''
                        export AWS_ACCESS_KEY_ID=${AWS_CREDENTIALS_USR}
                        export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIALS_PSW}
                        terraform apply -auto-approve tfplan
                        ''', returnStdout: true).trim()
                        
                        // Send Slack notification with apply output and state file
                        slackSend(channel: '#terraform',
                                  message: ":green_heart: *Job:* ${env.JOB_NAME} \n*Build ID:* ${env.BUILD_ID} \n*Terraform Apply Output:* \n${applyOutput} \n*State file:* s3://terraform-aws-thirupathi-test/${params.TERRAFORM_DIR}/state/terraform.tfstate",
                                  token: SLACK_CREDENTIALS)
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                def executionTime = currentBuild.durationString
                slackSend(channel: '#terraform',
                          message: ":tada: *Job:* ${env.JOB_NAME} \n*Build ID:* ${env.BUILD_ID} \n*Pipeline succeeded!* \n*Build Execution Time:* ${executionTime} \n*State file:* s3://terraform-aws-thirupathi-test/${params.TERRAFORM_DIR}/state/terraform.tfstate",
                          token: SLACK_CREDENTIALS)
            }
            echo 'Pipeline succeeded!'
        }
        failure {
            script {
                slackSend(channel: '#terraform',
                          message: ":red_circle: *Job:* ${env.JOB_NAME} \n*Build ID:* ${env.BUILD_ID} \n*Pipeline failed.* Check the logs for details. :x:",
                          token: SLACK_CREDENTIALS)
            }
            echo 'Pipeline failed.'
        }
        always {
            script {
                // Clean workspace
                cleanWs()
                // Notify completion
                slackSend(channel: '#terraform',
                          message: ":white_small_square: *Job:* ${env.JOB_NAME} \n*Build ID:* ${env.BUILD_ID} \n*Pipeline has completed execution.*",
                          token: SLACK_CREDENTIALS)
                // Check for aborted builds
                if (currentBuild.result == 'ABORTED') {
                    slackSend(channel: '#terraform',
                              message: ":warning: *Job:* ${env.JOB_NAME} \n*Build ID:* ${env.BUILD_ID} \n*Pipeline aborted and job finished.* Check the logs for details.",
                              token: SLACK_CREDENTIALS)
                }
            }
        }
    }
}
